# -*- coding: utf-8 -*-
"""plot_thickness_vs_width.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bhfSelVgQ_sKzsxf_cUzbaElFgb-Bg9R
"""

def plot_thickness_vs_width(thickness_data, figuresize, show_model='false'):
  """
  Plots an array of consecutive thickness measurements.
  """

"""Takes a data set containing thickness measurements 
for a single lily tepal and plots them. If desired, 
a model for lily thickness can also be plotted to 
compare (model comes from Mahadevan *et al.* 2011).

Parameters
----------
thickness_data: 1D float array
                data
                array of data corresponding to consecutive 
                thickness measurements along the length of 
                the tepal
figuresize    : 1x2 array
                (width, height)
                specifies the size of the produced figure
show_model    : bool, default=false
                setting determines if the model is shown on
                the plot

Returns
-------
None
"""

def plot_thickness_vs_width(thickness_data, figuresize, show_model='false'):

  size = np.size(thickness_data)
  
  x = np.linspace(0,1,size)
  
  fig, ax = plt.subplots(figsize= figuresize)
  
  ax.scatter(x, thickness_data, c='#000000', s=2, label='Tepal Thickness Measurement')
  plt.xlabel('Length of Tepal', fontsize=16)
  plt.ylabel('Thickness', fontsize=16)
  
  if show_model == 'true':
    y = np.linspace(0,1,1001)
    model = np.max(thickness_data)*(1 - (y - 0.5)**2/(0.25))
    ax.plot(y, model, c='#FF0000', linewidth=1, label='Model')
    ax.legend(fontsize=16)

  else:
    return

  return

"""
Example
-------
import numpy as np
import matplotlib.pyplot as plt

# Make fake data for test

x1 = np.linspace(0,1,100)
fake_data = (1 - (x1 - 0.5)**2/0.25) + 0.04*np.random.randint(0,4,100)
plt.plot(x1, fake_data)

# Apply function

plot_thickness_vs_width(fake_data, (10,10), show_model='true')

"""