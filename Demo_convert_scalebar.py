# -*- coding: utf-8 -*-
"""Demo_convert_scalebar.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yaw6TMCepGpnegOajG8u_G6UUjnrfmvB

This code demonstrates the identify_scalebar and measure_scalebar functions on https://github.com/nicolepanek/2021_LilyProject using a test lily_mask image.
"""

import matplotlib.pyplot as plt
import numpy as np
from google.colab import drive
from skimage.morphology import label, dilation, binary_dilation, skeletonize
from skimage.measure import regionprops, regionprops_table
from skimage.morphology import disk, convex_hull_image
import pandas as pd

drive.mount('/content/drive/')

"""Access the test image on google drive. """

lily_mask = plt.imread('/content/drive/MyDrive/lilymaskonly.jpg')
fig, ax = plt.subplots(ncols=1)
ax.imshow(lily_mask, cmap='gray')
ax.set_title('Lily Tepal Mask')
ax.axis('off')

"""Notice the scale on the images states between the two markers is 10 mm wide. Save that value to be used for the measure_scalebar function."""

mm_dist = 10

"""The last input needed for the measure_distance functions is an integer value identifying the scale bar if the lily mask is labeled using the sci-kit image label function. The identify_scalebar function can help. It will not return a value, but skeletonize, label, and plot each object in the image so the user can view them."""

identify(lily_mask)

"""Based on the images displayed, the scale bar is labeled object 4. Save this information as an integer value."""

scalebar_object = 4

"""Now, use the measure_scalebar function to find the number of pixels per mm in the lily mask image. """

conversion = measure_scalebar(lily_mask, mm_dist, scalebar_object)
conversion

"""Thus, the scale bar conversion for this image is 23.6 pixels per mm.

Copies of the functions below:
"""

def identify(lily_im):
  lily = lily_im<1
  lily = lily.astype(int)
  # Create a skeletonized version of the lily.
  lily_sk = skeletonize(binary_dilation(lily, selem=disk(4)))
  lily_label = label(lily_sk) # Label the objects in the skeletonized image.
  #display the labeled objects
  fig, ax = plt.subplots(ncols=5, figsize=(25,6))
  ax[0].imshow(lily_label==1)
  ax[1].imshow(lily_label==2)
  ax[2].imshow(lily_label==3)
  ax[3].imshow(lily_label==4)
  ax[4].imshow(lily_label==5)
  titles = [1,2,3,4,5]
  for i,axi in enumerate(ax):
    axi.axis('off')
    axi.set_title(titles[i])

def measure_scalebar(lily_im,mm,ob):
  lily = lily_im<1
  lily = lily.astype(int)

  # Create a skeletonized version of the lily.
  lily_sk = skeletonize(binary_dilation(lily, selem=disk(4)))

  # Label the objects in the skeletonized image.
  lily_label = label(lily_sk) 
  scale_bar = lily_label==ob # scale bar previously identified using the "identify_scalebar" function
  scale_bar = lily_label.astype(int)  


  # Get the properties of just the skeleton scale bar
  test = regionprops_table(scale_bar, properties=('coords',)) 
  test = pd.DataFrame(test)

  # get the coordinates of all the pixels in the skeleton scale bar
  bars = test.iloc[3,0]

  # Create a histogram of the bar x coordinates and display it.
  hist, bins = np.histogram(test.iloc[3,0][:,1], np.linspace(0,1500,1501))
  fig, ax = plt.subplots(ncols=1)
  ax.plot(hist)
  xaxis = 'X-Coordinates'
  yaxis = 'Number of Pixels'
  ax.set_xlabel(xaxis)
  ax.set_ylabel(yaxis)
  ax.set_title('Histogram of the Scale Bar X-coordinates')

  #find the distance between the two maxima
  dist = np.argsort(hist)[-1] - np.argsort(hist)[-2]

  #divide by the mm length to get the number of pixel per 1 mm
  conversion = dist / mm
  return conversion

