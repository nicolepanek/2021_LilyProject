# -*- coding: utf-8 -*-
"""measure_thickness.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Lz2YFyfcpzm42z3lOdDOp050N4-2exwM
"""

def measure_thickness(im, im_skelcoords):
  """
  Measure thicknesses along the length of a tepal.
  """

"""Thickness of the tepal at each point along the skeleton 
is measured by finding the line perpendicular to each tangent 
line along the length of the skeleton. The intersection of the 
perpendicular line with an outline of the tepal is used to 
obtain thickness.

Parameters
----------
im            : 2D array uint8
                image
                image containing the one tepal from 
                the lily bud slice
im_skelcoords : Nx2 float array
                data
                all coordinates of the tepal skeleton listed 
                in order from end to end

Returns
-------
thickness_data: Nx1 float array
                data
                thickness measurements taken at all coordinates 
                of the tepal skeleton, perpendicular to the tangent
                line at each coordinate. Given in units of pixels.
"""

def measure_thickness(im, im_skelcoords):
  
  # Get vectors tangent to skeleton
  tangent_vecs = np.diff(im_skelcoords, n=1, axis=0)
  
  # Calculate perpendicular vectors from tangent vectors
  ortho_vecs = tangent_vecs[:, ::-1]
  ortho_vecs[:,1] = -ortho_vecs[:,1]

  # Obtain outline of tepal image
  im_outline = np.logical_xor(im, erode(im, disk(1)))

  # Define thickness_data array
  thickness_data = []

  # Loop through orthogonal vectors along skeleton and measure thickness
  for i, coordinates in enumerate(ortho_vecs):

    if i > len(ortho_vecs) - 1:
      break

    # Create an empty array of 0s to image with cross-section lines
    im_l = np.zeros(np.shape(im_outline)) > 0.5 

    # Create grid of xy coordinates for Boolean operations
    xi = np.linspace(0, np.shape(im_outline)[1]-1, np.shape(im_outline)[1])
    yi = np.linspace(0, np.shape(im_outline)[0]-1, np.shape(im_outline)[0])
    y, x = np.meshgrid(xi, yi)

    # If the perpendicular vectors are vertical, draw vertical line at x coordinate of the skeleton
    if ortho_vecs[i,0] == 0: 
      im_l[x == im_skelcoords[i+1,0]] = True

    # Calculate slope, m, and intercept, b, of perpendicular line
    else:
      m = ortho_vecs[i,1]/ortho_vecs[i,0] 
      b = im_skelcoords[i,1] - m*im_skelcoords[i,0]

      # Draw perpendicular line in binary image (when not vertical)
      im_l[np.abs(y - (m*x + b)) < 0.5] = True 

    # Find intersections of tepal outline with perpendicular line
    im_i = dilate(im_outline, disk(3)) & im_l

    # Label intersection points
    im_il = morphlabel(im_i) 

    # Find centroids of intersection points
    regions = regionprops_table(im_il, properties=('label','centroid')) 

    # Organize intersection centroid coordinates into an array
    for j, centroid_coords in enumerate(regions.values()):
      if j == 0:
        x_pts = centroid_coords
      else:
        x_pts = np.vstack((x_pts, centroid_coords))

    # List intersection points as pairs of x and y coordinates
    x_pts = np.transpose(x_pts[1:,:])

    # If perpenicular vector crosses tepal outline in more than two places, only pick out the two closest points to the current skeleton coordinate 
    if len(x_pts) > 2:
      test_dists = []

      for row in x_pts:
        add_dist = np.round(euclidean(row, idxs[i]), 3)
        test_dists.append(add_dist)

      while len(x_pts) > 2:
        max_dist = np.max(test_dists)
        kill_index = test_dists.index(max_dist)
        x_pts = np.delete(x_pts, kill_index, axis=0)
        del test_dists[kill_index]
    
    # Save point 1 and point 2 for end bounds of thickness measurement
    p1 = x_pts[0]
    p2 = x_pts[1]

    # Calculate distance between intersection points in pixels
    dist = euclidean(p1, p2)
    
    # Add dist measurement to thickness array
    thickness_data.append(dist)

  return thickness_data

"""
Example
-------
import numpy as np

from skimage.morphology import skeletonize
from skimage.morphology import erosion as erode
from skimage.morphology import dilation as dilate
from skimage.morphology import morphlabel

from skimage.measure import regionprops, regionprops_table

from scipy.spatial.distance import euclidean

from google.colab import drive    # Code required to access files in google drive

drive.mount('/content/drive', force_remount=True)   # Mount google drive in order to access files

im = img_as_ubyte(plt.imread('/content/drive/MyDrive/LilyData/tepal1.jpg'))
threshold = threshold_otsu(im[:,:,1])
im = im[:,:,1] > threshold

# Find tepal image skeleton coordinates
im_skel = skeletonize(im)
skel_coords = np,argwhere(im_skel)

# Reorder coordinates using reorder_skeleton()
skel_coordsord = reorder_skeleton(skel_coords)

# Obtain thickness with measure_thickness()
thicknesses = measure_thickness(im, skel_coordsord)
"""